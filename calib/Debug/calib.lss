
calib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803e00  000002fa  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00803e02  00803e02  00000390  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000400  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000368d  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f0e  00000000  00000000  00003cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001032  00000000  00000000  00005bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00006bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001810  00000000  00000000  00006eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d9  00000000  00000000  000086c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000089a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	ea ef       	ldi	r30, 0xFA	; 250
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	aa 30       	cpi	r26, 0x0A	; 10
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	c3 d0       	rcall	.+390    	; 0x1ee <main>
  68:	46 c1       	rjmp	.+652    	; 0x2f6 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
  6c:	08 d1       	rcall	.+528    	; 0x27e <system_init>
  6e:	08 95       	ret

00000070 <Counter>:
	}
	else														// Perfect match, OSCCALR stays unchanged
	{
		calibration = FINISHED;
	}
	calStep >>= 1;
  70:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
  74:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
  78:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
  7c:	81 11       	cpse	r24, r1
  7e:	fc cf       	rjmp	.-8      	; 0x78 <Counter+0x8>
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
  8a:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
  8e:	24 36       	cpi	r18, 0x64	; 100
  90:	31 05       	cpc	r19, r1
  92:	c0 f3       	brcs	.-16     	; 0x84 <__EEPROM_REGION_LENGTH__+0x4>
  94:	08 95       	ret

00000096 <NeighborSearch>:
* prior to it.
*
*/
void NeighborSearch(void){

	neighborsSearched++;
  96:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <neighborsSearched>
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <neighborsSearched>
	if (neighborsSearched == 4)										// Finish if 3 neighbors searched
  a0:	84 30       	cpi	r24, 0x04	; 4
  a2:	61 f4       	brne	.+24     	; 0xbc <NeighborSearch+0x26>
	{
		ccp_write_io((void*)&(OSCCALR), bestOSCCAL);
  a4:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <bestOSCCAL>
  a8:	81 e7       	ldi	r24, 0x71	; 113
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	1e d1       	rcall	.+572    	; 0x2ea <ccp_write_io>
		NOP();
		calibration = FINISHED;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <calibration>
  b6:	90 93 07 3e 	sts	0x3E07, r25	; 0x803e07 <calibration+0x1>
  ba:	08 95       	ret
	}
	else
	{
		ccp_write_io((void*)&(OSCCALR), OSCCALR + sign);
  bc:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
  c0:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <__data_end>
  c4:	68 0f       	add	r22, r24
  c6:	81 e7       	ldi	r24, 0x71	; 113
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0f d1       	rcall	.+542    	; 0x2ea <ccp_write_io>
  cc:	08 95       	ret

000000ce <CalibrateInternalRc>:
*
* Performs the calibration according to calibration method chosen.
* Compares different calibration results in order to achieve optimal results.
*
*/
signed char CalibrateInternalRc(void){
  ce:	cf 93       	push	r28
	unsigned int count;

#ifdef CALIBRATION_METHOD_TURNING
	unsigned int countDiff;
	neighborsSearched = 0;
  d0:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <neighborsSearched>
	
	unsigned char i = 0;
	calibration = FINISHED;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <calibration>
  dc:	90 93 07 3e 	sts	0x3E07, r25	; 0x803e07 <calibration+0x1>

#ifdef CALIBRATION_METHOD_TURNING
	unsigned int countDiff;
	neighborsSearched = 0;
	
	unsigned char i = 0;
  e0:	90 e0       	ldi	r25, 0x00	; 0
	calibration = FINISHED;
	
	while(i++ < COUNT_RETRY)
  e2:	21 c0       	rjmp	.+66     	; 0x126 <CalibrateInternalRc+0x58>
	{
		count = Counter();
  e4:	c5 df       	rcall	.-118    	; 0x70 <Counter>
  e6:	fc 01       	movw	r30, r24
		countDiff = ABS((signed int)count-(signed int)countVal);
  e8:	20 91 04 3e 	lds	r18, 0x3E04	; 0x803e04 <countVal>
  ec:	30 91 05 3e 	lds	r19, 0x3E05	; 0x803e05 <countVal+0x1>
  f0:	ac 01       	movw	r20, r24
  f2:	42 1b       	sub	r20, r18
  f4:	53 0b       	sbc	r21, r19
  f6:	ca 01       	movw	r24, r20
  f8:	99 23       	and	r25, r25
  fa:	24 f4       	brge	.+8      	; 0x104 <CalibrateInternalRc+0x36>
  fc:	88 27       	eor	r24, r24
  fe:	99 27       	eor	r25, r25
 100:	84 1b       	sub	r24, r20
 102:	95 0b       	sbc	r25, r21
 104:	ac 01       	movw	r20, r24
		if (countDiff < (countVal * ACCURACY_DEFAULT))
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	36 95       	lsr	r19
 10c:	27 95       	ror	r18
 10e:	36 95       	lsr	r19
 110:	27 95       	ror	r18
 112:	ab e7       	ldi	r26, 0x7B	; 123
 114:	b4 e1       	ldi	r27, 0x14	; 20
 116:	dd d0       	rcall	.+442    	; 0x2d2 <__umulhisi3>
 118:	9c 01       	movw	r18, r24
 11a:	36 95       	lsr	r19
 11c:	27 95       	ror	r18
	neighborsSearched = 0;
	
	unsigned char i = 0;
	calibration = FINISHED;
	
	while(i++ < COUNT_RETRY)
 11e:	9c 2f       	mov	r25, r28
	{
		count = Counter();
		countDiff = ABS((signed int)count-(signed int)countVal);
		if (countDiff < (countVal * ACCURACY_DEFAULT))
 120:	42 17       	cp	r20, r18
 122:	53 07       	cpc	r21, r19
 124:	20 f0       	brcs	.+8      	; 0x12e <CalibrateInternalRc+0x60>
	neighborsSearched = 0;
	
	unsigned char i = 0;
	calibration = FINISHED;
	
	while(i++ < COUNT_RETRY)
 126:	c1 e0       	ldi	r28, 0x01	; 1
 128:	c9 0f       	add	r28, r25
 12a:	9a 30       	cpi	r25, 0x0A	; 10
 12c:	d8 f2       	brcs	.-74     	; 0xe4 <CalibrateInternalRc+0x16>
		if (countDiff < (countVal * ACCURACY_DEFAULT))
		{
			break;
		}		
	}
	if (i >= COUNT_RETRY) return -1;
 12e:	ca 30       	cpi	r28, 0x0A	; 10
 130:	08 f0       	brcs	.+2      	; 0x134 <CalibrateInternalRc+0x66>
 132:	47 c0       	rjmp	.+142    	; 0x1c2 <CalibrateInternalRc+0xf4>
	
	if (count < countVal)
 134:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <countVal>
 138:	90 91 05 3e 	lds	r25, 0x3E05	; 0x803e05 <countVal+0x1>
 13c:	e8 17       	cp	r30, r24
 13e:	f9 07       	cpc	r31, r25
 140:	20 f4       	brcc	.+8      	; 0x14a <CalibrateInternalRc+0x7c>
	{
		sign = 1;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <__data_end>
 148:	0d c0       	rjmp	.+26     	; 0x164 <CalibrateInternalRc+0x96>
	}
	else if (count > countVal)
 14a:	8e 17       	cp	r24, r30
 14c:	9f 07       	cpc	r25, r31
 14e:	20 f4       	brcc	.+8      	; 0x158 <CalibrateInternalRc+0x8a>
	{
		sign = -1;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <__data_end>
 156:	06 c0       	rjmp	.+12     	; 0x164 <CalibrateInternalRc+0x96>
	} else
	{
		calibration = FINISHED;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <calibration>
 160:	90 93 07 3e 	sts	0x3E07, r25	; 0x803e07 <calibration+0x1>
	}
	bestCountDiff = countDiff;
 164:	40 93 00 3e 	sts	0x3E00, r20	; 0x803e00 <__DATA_REGION_ORIGIN__>
 168:	50 93 01 3e 	sts	0x3E01, r21	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
	bestOSCCAL = OSCCALR;
 16c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
 170:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <bestOSCCAL>
	NeighborSearch();
 174:	90 df       	rcall	.-224    	; 0x96 <NeighborSearch>
	
	while(calibration == RUNNING){
 176:	1d c0       	rjmp	.+58     	; 0x1b2 <CalibrateInternalRc+0xe4>
		count = Counter();                                          // Counter returns the count value after external ticks on XTAL		
 178:	7b df       	rcall	.-266    	; 0x70 <Counter>
		countDiff = ABS((signed int)count-(signed int)countVal);
 17a:	20 91 04 3e 	lds	r18, 0x3E04	; 0x803e04 <countVal>
 17e:	30 91 05 3e 	lds	r19, 0x3E05	; 0x803e05 <countVal+0x1>
 182:	82 1b       	sub	r24, r18
 184:	93 0b       	sbc	r25, r19
 186:	9c 01       	movw	r18, r24
 188:	22 f4       	brpl	.+8      	; 0x192 <CalibrateInternalRc+0xc4>
 18a:	22 27       	eor	r18, r18
 18c:	33 27       	eor	r19, r19
 18e:	28 1b       	sub	r18, r24
 190:	39 0b       	sbc	r19, r25
		if (countDiff < bestCountDiff)						// Store OSCCALR if higher accuracy is achieved
 192:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 196:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 19a:	28 17       	cp	r18, r24
 19c:	39 07       	cpc	r19, r25
 19e:	40 f4       	brcc	.+16     	; 0x1b0 <CalibrateInternalRc+0xe2>
		{
			bestCountDiff = countDiff;
 1a0:	20 93 00 3e 	sts	0x3E00, r18	; 0x803e00 <__DATA_REGION_ORIGIN__>
 1a4:	30 93 01 3e 	sts	0x3E01, r19	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
			bestOSCCAL = OSCCALR;
 1a8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
 1ac:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <bestOSCCAL>
		}
		NeighborSearch();
 1b0:	72 df       	rcall	.-284    	; 0x96 <NeighborSearch>
	}
	bestCountDiff = countDiff;
	bestOSCCAL = OSCCALR;
	NeighborSearch();
	
	while(calibration == RUNNING){
 1b2:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <calibration>
 1b6:	90 91 07 3e 	lds	r25, 0x3E07	; 0x803e07 <calibration+0x1>
 1ba:	89 2b       	or	r24, r25
 1bc:	e9 f2       	breq	.-70     	; 0x178 <CalibrateInternalRc+0xaa>
			}
		}
	#endif
#endif

	return 0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <CalibrateInternalRc+0xf6>
		if (countDiff < (countVal * ACCURACY_DEFAULT))
		{
			break;
		}		
	}
	if (i >= COUNT_RETRY) return -1;
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
		}
	#endif
#endif

	return 0;
}
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <CalibInternalRc>:
*
*/

signed char CalibInternalRc(void){
	// Sets initial stepsize and sets calibration state to "running"
	calStep = INITIAL_STEP;
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	80 93 03 3e 	sts	0x3E03, r24	; 0x803e03 <calStep>
	calibration = RUNNING;
 1ce:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <calibration>
 1d2:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <calibration+0x1>
	countVal = ((EXTERNAL_TICKS * CALIBRATION_FREQUENCY) / (XTAL_FREQUENCY * LOOP_CYCLES));
 1d6:	87 ef       	ldi	r24, 0xF7	; 247
 1d8:	94 e0       	ldi	r25, 0x04	; 4
 1da:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <countVal>
 1de:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <countVal+0x1>
	
	while (STATUS_TIMER_REGISTER > 0);					// Wait until async timer is updated  (Async Status reg. busy flags).
 1e2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 1e6:	81 11       	cpse	r24, r1
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <CalibInternalRc+0x1a>
	#else
		ccp_write_io((void*)&(OSCCALR), DEFAULT_OSCCAL);	// Initiates calibration
		NOP();                                           
	#endif
	
	return CalibrateInternalRc();								// Calibrates to selected frequency
 1ea:	71 df       	rcall	.-286    	; 0xce <CalibrateInternalRc>
}
 1ec:	08 95       	ret

000001ee <main>:
#include <util/delay.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 1ee:	3e df       	rcall	.-388    	; 0x6c <atmel_start_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	83 ed       	ldi	r24, 0xD3	; 211
 1f2:	90 e3       	ldi	r25, 0x30	; 48
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0x6>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0xc>
 1fa:	00 00       	nop
	_delay_ms(10);
	_NOP();
 1fc:	00 00       	nop
	CalibInternalRc();
 1fe:	e4 df       	rcall	.-56     	; 0x1c8 <CalibInternalRc>
	_NOP();
 200:	00 00       	nop
 202:	ff cf       	rjmp	.-2      	; 0x202 <__DATA_REGION_LENGTH__+0x2>

00000204 <BOD_init>:
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret

00000208 <CLKCTRL_init>:
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	68 ed       	ldi	r22, 0xD8	; 216
 20c:	8c e7       	ldi	r24, 0x7C	; 124
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	3e d0       	rcall	.+124    	; 0x28e <protected_write_io>
 212:	43 e0       	ldi	r20, 0x03	; 3
 214:	68 ed       	ldi	r22, 0xD8	; 216
 216:	81 e6       	ldi	r24, 0x61	; 97
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	39 d0       	rcall	.+114    	; 0x28e <protected_write_io>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret

00000220 <CPUINT_init>:
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret

00000224 <mcu_init>:
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 c0       	rjmp	.+16     	; 0x238 <mcu_init+0x14>
 228:	e8 2f       	mov	r30, r24
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	e0 5f       	subi	r30, 0xF0	; 240
 22e:	fb 4f       	sbci	r31, 0xFB	; 251
 230:	90 81       	ld	r25, Z
 232:	98 60       	ori	r25, 0x08	; 8
 234:	90 83       	st	Z, r25
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	88 30       	cpi	r24, 0x08	; 8
 23a:	b0 f3       	brcs	.-20     	; 0x228 <mcu_init+0x4>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	08 c0       	rjmp	.+16     	; 0x250 <mcu_init+0x2c>
 240:	e8 2f       	mov	r30, r24
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	e0 5d       	subi	r30, 0xD0	; 208
 246:	fb 4f       	sbci	r31, 0xFB	; 251
 248:	90 81       	ld	r25, Z
 24a:	98 60       	ori	r25, 0x08	; 8
 24c:	90 83       	st	Z, r25
 24e:	8f 5f       	subi	r24, 0xFF	; 255
 250:	88 30       	cpi	r24, 0x08	; 8
 252:	b0 f3       	brcs	.-20     	; 0x240 <mcu_init+0x1c>
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 c0       	rjmp	.+16     	; 0x268 <mcu_init+0x44>
 258:	e8 2f       	mov	r30, r24
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	e0 5b       	subi	r30, 0xB0	; 176
 25e:	fb 4f       	sbci	r31, 0xFB	; 251
 260:	90 81       	ld	r25, Z
 262:	98 60       	ori	r25, 0x08	; 8
 264:	90 83       	st	Z, r25
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	88 30       	cpi	r24, 0x08	; 8
 26a:	b0 f3       	brcs	.-20     	; 0x258 <mcu_init+0x34>
 26c:	08 95       	ret

0000026e <PWM_0_initialization>:
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	8d 7f       	andi	r24, 0xFD	; 253
 272:	85 b9       	out	0x05, r24	; 5
 274:	84 b1       	in	r24, 0x04	; 4
 276:	82 60       	ori	r24, 0x02	; 2
 278:	84 b9       	out	0x04, r24	; 4
 27a:	0d d0       	rcall	.+26     	; 0x296 <PWM_0_init>
 27c:	08 95       	ret

0000027e <system_init>:
 27e:	d2 df       	rcall	.-92     	; 0x224 <mcu_init>
 280:	c3 df       	rcall	.-122    	; 0x208 <CLKCTRL_init>
 282:	19 d0       	rcall	.+50     	; 0x2b6 <RTC_0_init>
 284:	f4 df       	rcall	.-24     	; 0x26e <PWM_0_initialization>
 286:	cc df       	rcall	.-104    	; 0x220 <CPUINT_init>
 288:	22 d0       	rcall	.+68     	; 0x2ce <SLPCTRL_init>
 28a:	bc df       	rcall	.-136    	; 0x204 <BOD_init>
 28c:	08 95       	ret

0000028e <protected_write_io>:
 28e:	fc 01       	movw	r30, r24
 290:	64 bf       	out	0x34, r22	; 52
 292:	40 83       	st	Z, r20
 294:	08 95       	ret

00000296 <PWM_0_init>:
 296:	e0 e0       	ldi	r30, 0x00	; 0
 298:	fa e0       	ldi	r31, 0x0A	; 10
 29a:	84 ef       	ldi	r24, 0xF4	; 244
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	82 a7       	std	Z+42, r24	; 0x2a
 2a0:	93 a7       	std	Z+43, r25	; 0x2b
 2a2:	83 e2       	ldi	r24, 0x23	; 35
 2a4:	81 83       	std	Z+1, r24	; 0x01
 2a6:	88 ee       	ldi	r24, 0xE8	; 232
 2a8:	93 e0       	ldi	r25, 0x03	; 3
 2aa:	86 a3       	std	Z+38, r24	; 0x26
 2ac:	97 a3       	std	Z+39, r25	; 0x27
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 83       	st	Z, r24
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret

000002b6 <RTC_0_init>:
 2b6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 2ba:	81 11       	cpse	r24, r1
 2bc:	fc cf       	rjmp	.-8      	; 0x2b6 <RTC_0_init>
 2be:	e0 e4       	ldi	r30, 0x40	; 64
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 83       	st	Z, r24
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	87 83       	std	Z+7, r24	; 0x07
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret

000002ce <SLPCTRL_init>:
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 95       	ret

000002d2 <__umulhisi3>:
 2d2:	a2 9f       	mul	r26, r18
 2d4:	b0 01       	movw	r22, r0
 2d6:	b3 9f       	mul	r27, r19
 2d8:	c0 01       	movw	r24, r0
 2da:	a3 9f       	mul	r26, r19
 2dc:	01 d0       	rcall	.+2      	; 0x2e0 <__umulhisi3+0xe>
 2de:	b2 9f       	mul	r27, r18
 2e0:	70 0d       	add	r23, r0
 2e2:	81 1d       	adc	r24, r1
 2e4:	11 24       	eor	r1, r1
 2e6:	91 1d       	adc	r25, r1
 2e8:	08 95       	ret

000002ea <ccp_write_io>:
 2ea:	dc 01       	movw	r26, r24
 2ec:	28 ed       	ldi	r18, 0xD8	; 216
 2ee:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__RODATA_PM_OFFSET__+0x7f8034>
 2f2:	6c 93       	st	X, r22
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
