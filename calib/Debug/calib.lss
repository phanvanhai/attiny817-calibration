
calib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00803e04  00803e04  0000040c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000478  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036ea  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f11  00000000  00000000  00003d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000104f  00000000  00000000  00005c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00006cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017f3  00000000  00000000  00006fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000211  00000000  00000000  0000879f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000089b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e4 e7       	ldi	r30, 0x74	; 116
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 30       	cpi	r26, 0x04	; 4
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a4 e0       	ldi	r26, 0x04	; 4
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ae 30       	cpi	r26, 0x0E	; 14
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	f5 d0       	rcall	.+490    	; 0x252 <main>
  68:	83 c1       	rjmp	.+774    	; 0x370 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  6c:	45 d1       	rcall	.+650    	; 0x2f8 <system_init>
  6e:	08 95       	ret

00000070 <InitCalibRc>:
void _delay_5us(void);

void InitCalibRc(void)
{
	// Sets initial stepsize and sets calibration state to "running"
	calStep = INITIAL_STEP;
  70:	80 e1       	ldi	r24, 0x10	; 16
  72:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <calStep>
	calibration = RUNNING;
  76:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <calibration>
  7a:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <calibration+0x1>
	countVal = ((EXTERNAL_TICKS * CALIBRATION_FREQUENCY) / (XTAL_FREQUENCY * LOOP_CYCLES));
  7e:	87 ef       	ldi	r24, 0xF7	; 247
  80:	94 e0       	ldi	r25, 0x04	; 4
  82:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <countVal>
  86:	90 93 09 3e 	sts	0x3E09, r25	; 0x803e09 <countVal+0x1>
	
	while (STATUS_TIMER_REGISTER > 0);					// Wait until async timer is updated  (Async Status reg. busy flags).
  8a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
  8e:	81 11       	cpse	r24, r1
  90:	fc cf       	rjmp	.-8      	; 0x8a <__EEPROM_REGION_LENGTH__+0xa>
	defaultCalibValueAtmel = OSCCALR;
  92:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
  96:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <defaultCalibValueAtmel>
  9a:	08 95       	ret

0000009c <Counter>:
*/
unsigned int Counter(void){
	unsigned int cnt;

	cnt = 0;													// Reset counter
	TIMER_COUNT = 0x00;											// Reset async timer/counter
  9c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
  a0:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	while (STATUS_TIMER_REGISTER > 0);							// Wait until async timer is updated  (Async Status reg. busy flags).
  a4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
  a8:	81 11       	cpse	r24, r1
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <Counter+0x8>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
	do{
		cnt++;													
  b0:	01 96       	adiw	r24, 0x01	; 1
	} while (TIMER_COUNT < EXTERNAL_TICKS);						// Until 32.7KHz (XTAL FREQUENCY) * EXTERNAL TICKS
  b2:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
  b6:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
  ba:	24 36       	cpi	r18, 0x64	; 100
  bc:	31 05       	cpc	r19, r1
  be:	c0 f3       	brcs	.-16     	; 0xb0 <Counter+0x14>
		00000055  BRCS PC-0x07		Branch if carry set					// 1 or 2
	=================================================================	= 2 + 3 + 3 + 1 + 1 + 2 = 12 clocks
	*/
	
	return cnt;
}                                                               
  c0:	08 95       	ret

000000c2 <NeighborSearch>:
* prior to it.
*
*/
void NeighborSearch(void){

	neighborsSearched++;
  c2:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <neighborsSearched>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <neighborsSearched>
	if (neighborsSearched == 4)										// Finish if 3 neighbors searched
  cc:	84 30       	cpi	r24, 0x04	; 4
  ce:	89 f5       	brne	.+98     	; 0x132 <NeighborSearch+0x70>
	{		
		if (bestCountDiff < (countVal * ACCURACY_DEFAULT))
  d0:	20 91 08 3e 	lds	r18, 0x3E08	; 0x803e08 <countVal>
  d4:	30 91 09 3e 	lds	r19, 0x3E09	; 0x803e09 <countVal+0x1>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	36 95       	lsr	r19
  de:	27 95       	ror	r18
  e0:	36 95       	lsr	r19
  e2:	27 95       	ror	r18
  e4:	ab e7       	ldi	r26, 0x7B	; 123
  e6:	b4 e1       	ldi	r27, 0x14	; 20
  e8:	31 d1       	rcall	.+610    	; 0x34c <__umulhisi3>
  ea:	96 95       	lsr	r25
  ec:	87 95       	ror	r24
  ee:	20 91 01 3e 	lds	r18, 0x3E01	; 0x803e01 <bestCountDiff>
  f2:	30 91 02 3e 	lds	r19, 0x3E02	; 0x803e02 <bestCountDiff+0x1>
  f6:	28 17       	cp	r18, r24
  f8:	39 07       	cpc	r19, r25
  fa:	48 f4       	brcc	.+18     	; 0x10e <NeighborSearch+0x4c>
		{
			success_flag = 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
			ccp_write_io((void*)&(OSCCALR), bestOSCCAL);
 102:	60 91 0d 3e 	lds	r22, 0x3E0D	; 0x803e0d <bestOSCCAL>
 106:	81 e7       	ldi	r24, 0x71	; 113
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	2c d1       	rcall	.+600    	; 0x364 <ccp_write_io>
 10c:	0b c0       	rjmp	.+22     	; 0x124 <NeighborSearch+0x62>
			NOP();
		}
		else
		{		
			success_flag = 0;	
 10e:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
			if (OSCCALR != defaultCalibValueAtmel)
 112:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
 116:	60 91 07 3e 	lds	r22, 0x3E07	; 0x803e07 <defaultCalibValueAtmel>
 11a:	86 17       	cp	r24, r22
 11c:	19 f0       	breq	.+6      	; 0x124 <NeighborSearch+0x62>
			{					
				ccp_write_io((void*)&(OSCCALR), defaultCalibValueAtmel);			// If count is less: increase speed
 11e:	81 e7       	ldi	r24, 0x71	; 113
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	20 d1       	rcall	.+576    	; 0x364 <ccp_write_io>
				NOP();
			}
		}
		
		calibration = FINISHED;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <calibration>
 12c:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <calibration+0x1>
 130:	08 95       	ret
	}
	else
	{
		ccp_write_io((void*)&(OSCCALR), OSCCALR + sign);
 132:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
 136:	80 91 05 3e 	lds	r24, 0x3E05	; 0x803e05 <sign>
 13a:	68 0f       	add	r22, r24
 13c:	81 e7       	ldi	r24, 0x71	; 113
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	11 d1       	rcall	.+546    	; 0x364 <ccp_write_io>
 142:	08 95       	ret

00000144 <CalibrateInternalRc>:
*
* Performs the calibration according to calibration method chosen.
* Compares different calibration results in order to achieve optimal results.
*
*/
signed char CalibrateInternalRc(void){
 144:	cf 93       	push	r28
	unsigned int count;
	unsigned int countDiff;
	neighborsSearched = 0;
 146:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <neighborsSearched>
	
	success_flag = -1;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
	
	unsigned char i = 0;
	calibration = FINISHED;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <calibration>
 158:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <calibration+0x1>
	unsigned int countDiff;
	neighborsSearched = 0;
	
	success_flag = -1;
	
	unsigned char i = 0;
 15c:	90 e0       	ldi	r25, 0x00	; 0
	calibration = FINISHED;
	
	while(i++ < COUNT_RETRY)
 15e:	21 c0       	rjmp	.+66     	; 0x1a2 <CalibrateInternalRc+0x5e>
	{
		count = Counter();
 160:	9d df       	rcall	.-198    	; 0x9c <Counter>
 162:	fc 01       	movw	r30, r24
		countDiff = ABS((signed int)count-(signed int)countVal);
 164:	20 91 08 3e 	lds	r18, 0x3E08	; 0x803e08 <countVal>
 168:	30 91 09 3e 	lds	r19, 0x3E09	; 0x803e09 <countVal+0x1>
 16c:	ac 01       	movw	r20, r24
 16e:	42 1b       	sub	r20, r18
 170:	53 0b       	sbc	r21, r19
 172:	ca 01       	movw	r24, r20
 174:	99 23       	and	r25, r25
 176:	24 f4       	brge	.+8      	; 0x180 <CalibrateInternalRc+0x3c>
 178:	88 27       	eor	r24, r24
 17a:	99 27       	eor	r25, r25
 17c:	84 1b       	sub	r24, r20
 17e:	95 0b       	sbc	r25, r21
 180:	ac 01       	movw	r20, r24
		if (countDiff < (countVal * ACCURACY_DEFAULT))
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	36 95       	lsr	r19
 188:	27 95       	ror	r18
 18a:	36 95       	lsr	r19
 18c:	27 95       	ror	r18
 18e:	ab e7       	ldi	r26, 0x7B	; 123
 190:	b4 e1       	ldi	r27, 0x14	; 20
 192:	dc d0       	rcall	.+440    	; 0x34c <__umulhisi3>
 194:	9c 01       	movw	r18, r24
 196:	36 95       	lsr	r19
 198:	27 95       	ror	r18
	success_flag = -1;
	
	unsigned char i = 0;
	calibration = FINISHED;
	
	while(i++ < COUNT_RETRY)
 19a:	9c 2f       	mov	r25, r28
	{
		count = Counter();
		countDiff = ABS((signed int)count-(signed int)countVal);
		if (countDiff < (countVal * ACCURACY_DEFAULT))
 19c:	42 17       	cp	r20, r18
 19e:	53 07       	cpc	r21, r19
 1a0:	20 f0       	brcs	.+8      	; 0x1aa <CalibrateInternalRc+0x66>
	success_flag = -1;
	
	unsigned char i = 0;
	calibration = FINISHED;
	
	while(i++ < COUNT_RETRY)
 1a2:	c1 e0       	ldi	r28, 0x01	; 1
 1a4:	c9 0f       	add	r28, r25
 1a6:	94 31       	cpi	r25, 0x14	; 20
 1a8:	d8 f2       	brcs	.-74     	; 0x160 <CalibrateInternalRc+0x1c>
		{
			break;
		}		
	}
	
	if (i >= COUNT_RETRY) return success_flag;
 1aa:	c4 31       	cpi	r28, 0x14	; 20
 1ac:	18 f0       	brcs	.+6      	; 0x1b4 <CalibrateInternalRc+0x70>
 1ae:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 1b2:	4b c0       	rjmp	.+150    	; 0x24a <__DATA_REGION_LENGTH__+0x4a>
	
	if (count < countVal)
 1b4:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <countVal>
 1b8:	90 91 09 3e 	lds	r25, 0x3E09	; 0x803e09 <countVal+0x1>
 1bc:	e8 17       	cp	r30, r24
 1be:	f9 07       	cpc	r31, r25
 1c0:	20 f4       	brcc	.+8      	; 0x1ca <CalibrateInternalRc+0x86>
	{
		sign = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 05 3e 	sts	0x3E05, r24	; 0x803e05 <sign>
 1c8:	11 c0       	rjmp	.+34     	; 0x1ec <CalibrateInternalRc+0xa8>
	}
	else if (count > countVal)
 1ca:	8e 17       	cp	r24, r30
 1cc:	9f 07       	cpc	r25, r31
 1ce:	20 f4       	brcc	.+8      	; 0x1d8 <CalibrateInternalRc+0x94>
	{
		sign = -1;
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	80 93 05 3e 	sts	0x3E05, r24	; 0x803e05 <sign>
 1d6:	0a c0       	rjmp	.+20     	; 0x1ec <CalibrateInternalRc+0xa8>
	} else
	{
		success_flag = 0;
 1d8:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
		sign = 0;
 1dc:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <sign>
		calibration = FINISHED;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <calibration>
 1e8:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <calibration+0x1>
	}
	
	bestCountDiff = countDiff;
 1ec:	40 93 01 3e 	sts	0x3E01, r20	; 0x803e01 <bestCountDiff>
 1f0:	50 93 02 3e 	sts	0x3E02, r21	; 0x803e02 <bestCountDiff+0x1>
	bestOSCCAL = OSCCALR;
 1f4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
 1f8:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <bestOSCCAL>
	NeighborSearch();
 1fc:	62 df       	rcall	.-316    	; 0xc2 <NeighborSearch>
	
	while(calibration == RUNNING){
 1fe:	1d c0       	rjmp	.+58     	; 0x23a <__DATA_REGION_LENGTH__+0x3a>
		count = Counter();                                          // Counter returns the count value after external ticks on XTAL		
 200:	4d df       	rcall	.-358    	; 0x9c <Counter>
		countDiff = ABS((signed int)count-(signed int)countVal);
 202:	20 91 08 3e 	lds	r18, 0x3E08	; 0x803e08 <countVal>
 206:	30 91 09 3e 	lds	r19, 0x3E09	; 0x803e09 <countVal+0x1>
 20a:	82 1b       	sub	r24, r18
 20c:	93 0b       	sbc	r25, r19
 20e:	9c 01       	movw	r18, r24
 210:	22 f4       	brpl	.+8      	; 0x21a <__DATA_REGION_LENGTH__+0x1a>
 212:	22 27       	eor	r18, r18
 214:	33 27       	eor	r19, r19
 216:	28 1b       	sub	r18, r24
 218:	39 0b       	sbc	r19, r25
		if (countDiff < bestCountDiff)						// Store OSCCALR if higher accuracy is achieved
 21a:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <bestCountDiff>
 21e:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <bestCountDiff+0x1>
 222:	28 17       	cp	r18, r24
 224:	39 07       	cpc	r19, r25
 226:	40 f4       	brcc	.+16     	; 0x238 <__DATA_REGION_LENGTH__+0x38>
		{
			bestCountDiff = countDiff;
 228:	20 93 01 3e 	sts	0x3E01, r18	; 0x803e01 <bestCountDiff>
 22c:	30 93 02 3e 	sts	0x3E02, r19	; 0x803e02 <bestCountDiff+0x1>
			bestOSCCAL = OSCCALR;
 230:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
 234:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <bestOSCCAL>
		}
		NeighborSearch();
 238:	44 df       	rcall	.-376    	; 0xc2 <NeighborSearch>
	
	bestCountDiff = countDiff;
	bestOSCCAL = OSCCALR;
	NeighborSearch();
	
	while(calibration == RUNNING){
 23a:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <calibration>
 23e:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <calibration+0x1>
 242:	89 2b       	or	r24, r25
 244:	e9 f2       	breq	.-70     	; 0x200 <__DATA_REGION_LENGTH__>
			bestOSCCAL = OSCCALR;
		}
		NeighborSearch();
	}

	return success_flag;
 246:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <CalibInternalRc>:
* oscillator characteristics. Ends in an eternal loop.
*
*/

signed char CalibInternalRc(void){
	return CalibrateInternalRc();								// Calibrates to selected frequency
 24e:	7a df       	rcall	.-268    	; 0x144 <CalibrateInternalRc>
}
 250:	08 95       	ret

00000252 <main>:
signed char result = 0;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 252:	0c df       	rcall	.-488    	; 0x6c <atmel_start_init>
	InitCalibRc();
 254:	0d df       	rcall	.-486    	; 0x70 <InitCalibRc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	83 ed       	ldi	r24, 0xD3	; 211
 258:	90 e3       	ldi	r25, 0x30	; 48
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x8>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0xe>
 260:	00 00       	nop
	//_NOP();
	//CalibInternalRc();
	//_NOP();
	/* Replace with your application code */
	while (1) {		
		result = CalibInternalRc();
 262:	f5 df       	rcall	.-22     	; 0x24e <CalibInternalRc>
 264:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <__data_end>
		_NOP();
 268:	00 00       	nop
 26a:	9f e3       	ldi	r25, 0x3F	; 63
 26c:	2b e4       	ldi	r18, 0x4B	; 75
 26e:	8c e4       	ldi	r24, 0x4C	; 76
 270:	91 50       	subi	r25, 0x01	; 1
 272:	20 40       	sbci	r18, 0x00	; 0
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x1e>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x28>
 27a:	00 00       	nop
 27c:	f2 cf       	rjmp	.-28     	; 0x262 <main+0x10>

0000027e <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	08 95       	ret

00000282 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	68 ed       	ldi	r22, 0xD8	; 216
 286:	8c e7       	ldi	r24, 0x7C	; 124
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	3e d0       	rcall	.+124    	; 0x308 <protected_write_io>
 28c:	43 e0       	ldi	r20, 0x03	; 3
 28e:	68 ed       	ldi	r22, 0xD8	; 216
 290:	81 e6       	ldi	r24, 0x61	; 97
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	39 d0       	rcall	.+114    	; 0x308 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret

0000029a <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	08 95       	ret

0000029e <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2a2:	e8 2f       	mov	r30, r24
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	e0 5f       	subi	r30, 0xF0	; 240
 2a8:	fb 4f       	sbci	r31, 0xFB	; 251
 2aa:	90 81       	ld	r25, Z
 2ac:	98 60       	ori	r25, 0x08	; 8
 2ae:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	88 30       	cpi	r24, 0x08	; 8
 2b4:	b0 f3       	brcs	.-20     	; 0x2a2 <mcu_init+0x4>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 c0       	rjmp	.+16     	; 0x2ca <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2ba:	e8 2f       	mov	r30, r24
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	e0 5d       	subi	r30, 0xD0	; 208
 2c0:	fb 4f       	sbci	r31, 0xFB	; 251
 2c2:	90 81       	ld	r25, Z
 2c4:	98 60       	ori	r25, 0x08	; 8
 2c6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2c8:	8f 5f       	subi	r24, 0xFF	; 255
 2ca:	88 30       	cpi	r24, 0x08	; 8
 2cc:	b0 f3       	brcs	.-20     	; 0x2ba <mcu_init+0x1c>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2d2:	e8 2f       	mov	r30, r24
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	e0 5b       	subi	r30, 0xB0	; 176
 2d8:	fb 4f       	sbci	r31, 0xFB	; 251
 2da:	90 81       	ld	r25, Z
 2dc:	98 60       	ori	r25, 0x08	; 8
 2de:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	88 30       	cpi	r24, 0x08	; 8
 2e4:	b0 f3       	brcs	.-20     	; 0x2d2 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 2e6:	08 95       	ret

000002e8 <PWM_0_initialization>:
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 2e8:	85 b1       	in	r24, 0x05	; 5
 2ea:	8d 7f       	andi	r24, 0xFD	; 253
 2ec:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 2ee:	84 b1       	in	r24, 0x04	; 4
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB1_set_dir(PORT_DIR_OUT);

	PWM_0_init();
 2f4:	0d d0       	rcall	.+26     	; 0x310 <PWM_0_init>
 2f6:	08 95       	ret

000002f8 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 2f8:	d2 df       	rcall	.-92     	; 0x29e <mcu_init>

	CLKCTRL_init();
 2fa:	c3 df       	rcall	.-122    	; 0x282 <CLKCTRL_init>

	RTC_0_init();
 2fc:	19 d0       	rcall	.+50     	; 0x330 <RTC_0_init>

	PWM_0_initialization();
 2fe:	f4 df       	rcall	.-24     	; 0x2e8 <PWM_0_initialization>

	CPUINT_init();
 300:	cc df       	rcall	.-104    	; 0x29a <CPUINT_init>

	SLPCTRL_init();
 302:	22 d0       	rcall	.+68     	; 0x348 <SLPCTRL_init>

	BOD_init();
 304:	bc df       	rcall	.-136    	; 0x27e <BOD_init>
 306:	08 95       	ret

00000308 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 308:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 30a:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 30c:	40 83       	st	Z, r20
	ret                             // Return to caller
 30e:	08 95       	ret

00000310 <PWM_0_init>:
int8_t PWM_0_init()
{

	// TCA0.SINGLE.CMP0 = 0x0; /* Setting: 0x0 */

	TCA0.SINGLE.CMP1 = 0x1f4; /* Setting: 0x1f4 */
 310:	e0 e0       	ldi	r30, 0x00	; 0
 312:	fa e0       	ldi	r31, 0x0A	; 10
 314:	84 ef       	ldi	r24, 0xF4	; 244
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	82 a7       	std	Z+42, r24	; 0x2a
 31a:	93 a7       	std	Z+43, r25	; 0x2b

	// TCA0.SINGLE.CMP2 = 0x0; /* Setting: 0x0 */

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
 31c:	83 e2       	ldi	r24, 0x23	; 35
 31e:	81 83       	std	Z+1, r24	; 0x01
	// TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt Enable: disabled */

	TCA0.SINGLE.PER = 0x3e8; /* Top Value: 0x3e8 */
 320:	88 ee       	ldi	r24, 0xE8	; 232
 322:	93 e0       	ldi	r25, 0x03	; 3
 324:	86 a3       	std	Z+38, r24	; 0x26
 326:	97 a3       	std	Z+39, r25	; 0x27

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp /* Module Enable: enabled */;

	return 0;
}
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	08 95       	ret

00000330 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
 330:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 334:	81 11       	cpse	r24, r1
 336:	fc cf       	rjmp	.-8      	; 0x330 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
 338:	e0 e4       	ldi	r30, 0x40	; 64
 33a:	f1 e0       	ldi	r31, 0x01	; 1
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 0 << RTC_RUNSTDBY_bp; /* Run In Standby: disabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc; /* 32.768kHz External Crystal Oscillator (XOSC32K) */
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	87 83       	std	Z+7, r24	; 0x07
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	08 95       	ret

00000348 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret

0000034c <__umulhisi3>:
 34c:	a2 9f       	mul	r26, r18
 34e:	b0 01       	movw	r22, r0
 350:	b3 9f       	mul	r27, r19
 352:	c0 01       	movw	r24, r0
 354:	a3 9f       	mul	r26, r19
 356:	01 d0       	rcall	.+2      	; 0x35a <__umulhisi3+0xe>
 358:	b2 9f       	mul	r27, r18
 35a:	70 0d       	add	r23, r0
 35c:	81 1d       	adc	r24, r1
 35e:	11 24       	eor	r1, r1
 360:	91 1d       	adc	r25, r1
 362:	08 95       	ret

00000364 <ccp_write_io>:
 364:	dc 01       	movw	r26, r24
 366:	28 ed       	ldi	r18, 0xD8	; 216
 368:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__RODATA_PM_OFFSET__+0x7f8034>
 36c:	6c 93       	st	X, r22
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
