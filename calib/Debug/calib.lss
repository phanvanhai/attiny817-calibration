
calib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803e00  0000029c  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00803e02  00803e02  00000332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000003a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c0c  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ce8  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3d  00000000  00000000  00004e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00005b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000133d  00000000  00000000  00005d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000253  00000000  00000000  0000707d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000072d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	ec e9       	ldi	r30, 0x9C	; 156
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ac 30       	cpi	r26, 0x0C	; 12
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	b9 d0       	rcall	.+370    	; 0x1da <main>
  68:	17 c1       	rjmp	.+558    	; 0x298 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
  6c:	f6 d0       	rcall	.+492    	; 0x25a <system_init>
  6e:	08 95       	ret

00000070 <CalibrationInit>:
* speed with the external watch crystal, and sets up the asynchronous timer.
*
*/
void CalibrationInit(void){
  // Computes countVal for use in the calibration
  countVal = ((EXTERNAL_TICKS*CALIBRATION_FREQUENCY)/(XTAL_FREQUENCY*LOOP_CYCLES));
  70:	87 ef       	ldi	r24, 0xF7	; 247
  72:	94 e0       	ldi	r25, 0x04	; 4
  74:	80 93 05 3e 	sts	0x3E05, r24	; 0x803e05 <countVal>
  78:	90 93 06 3e 	sts	0x3E06, r25	; 0x803e06 <countVal+0x1>
  ccp_write_io((void*)&(OSCCALR), DEFAULT_OSCCAL);
  7c:	60 ee       	ldi	r22, 0xE0	; 224
  7e:	81 e7       	ldi	r24, 0x71	; 113
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	04 d1       	rcall	.+520    	; 0x28c <ccp_write_io>
  84:	08 95       	ret

00000086 <Counter>:
*/
unsigned int Counter(void){
  unsigned int cnt;

  cnt = 0;                                                      // Reset counter
  TIMER_COUNT = 0x00;                                           // Reset async timer/counter
  86:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
  8a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
  while (STATUS_TIMER_REGISTER > 0); // Wait until async timer is updated  (Async Status reg. busy flags).
  8e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
  92:	81 11       	cpse	r24, r1
  94:	fc cf       	rjmp	.-8      	; 0x8e <Counter+0x8>
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  do{                                                           // cnt++: Increment counter - the add immediate to word (ADIW) takes 2 cycles of code.
    cnt++;                                                      // Devices with async TCNT in I/0 space use 1 cycle reading, 2 for devices with async TCNT in extended I/O space
  9a:	01 96       	adiw	r24, 0x01	; 1
  } while (TIMER_COUNT < EXTERNAL_TICKS);                             // CPI takes 1 cycle, BRCS takes 2 cycles, resulting in: 2+1(or 2)+1+2=6(or 7) CPU cycles
  9c:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
  a0:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
  a4:	24 36       	cpi	r18, 0x64	; 100
  a6:	31 05       	cpc	r19, r1
  a8:	c0 f3       	brcs	.-16     	; 0x9a <Counter+0x14>
  return cnt;                                                   // NB! Different compilers may give different CPU cycles!
}                                                               // Until 32.7KHz (XTAL FREQUENCY) * EXTERNAL TICKS
  aa:	08 95       	ret

000000ac <BinarySearch>:
* correct OSSCAL value.
*
*/
void BinarySearch(unsigned int ct){

  if (ct > countVal)                                            // Check if count is larger than desired value
  ac:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <countVal>
  b0:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <countVal+0x1>
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	60 f4       	brcc	.+24     	; 0xd2 <BinarySearch+0x26>
  {
    sign = -1;                                                  // Saves the direction
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <__data_end>
    ccp_write_io((void*)&(OSCCALR),OSCCALR - calStep);                                      // Decrease OSCCALR if count is too high
  c0:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
  c4:	80 91 03 3e 	lds	r24, 0x3E03	; 0x803e03 <calStep>
  c8:	68 1b       	sub	r22, r24
  ca:	81 e7       	ldi	r24, 0x71	; 113
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	de d0       	rcall	.+444    	; 0x28c <ccp_write_io>
  d0:	15 c0       	rjmp	.+42     	; 0xfc <BinarySearch+0x50>
    NOP();
  }
  else if (ct < countVal)                                       // Opposite procedure for lower value
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	60 f4       	brcc	.+24     	; 0xf0 <BinarySearch+0x44>
  {
    sign = 1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <__data_end>
    ccp_write_io((void*)&(OSCCALR),OSCCALR + calStep);
  de:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
  e2:	80 91 03 3e 	lds	r24, 0x3E03	; 0x803e03 <calStep>
  e6:	68 0f       	add	r22, r24
  e8:	81 e7       	ldi	r24, 0x71	; 113
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	cf d0       	rcall	.+414    	; 0x28c <ccp_write_io>
  ee:	06 c0       	rjmp	.+12     	; 0xfc <BinarySearch+0x50>
    NOP();
  }
  else                                                          // Perfect match, OSCCALR stays unchanged
  {
    calibration = FINISHED;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <calibration>
  f8:	90 93 08 3e 	sts	0x3E08, r25	; 0x803e08 <calibration+0x1>
  }
  calStep >>= 1;
  fc:	80 91 03 3e 	lds	r24, 0x3E03	; 0x803e03 <calStep>
 100:	86 95       	lsr	r24
 102:	80 93 03 3e 	sts	0x3E03, r24	; 0x803e03 <calStep>
 106:	08 95       	ret

00000108 <NeighborSearch>:
* prior to it.
*
*/
void NeighborSearch(void){

  neighborsSearched++;
 108:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <neighborsSearched>
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <neighborsSearched>
  if (neighborsSearched == 4)                                   // Finish if 3 neighbors searched
 112:	84 30       	cpi	r24, 0x04	; 4
 114:	61 f4       	brne	.+24     	; 0x12e <NeighborSearch+0x26>
  {
	ccp_write_io((void*)&(OSCCALR), bestOSCCAL);
 116:	60 91 0b 3e 	lds	r22, 0x3E0B	; 0x803e0b <bestOSCCAL>
 11a:	81 e7       	ldi	r24, 0x71	; 113
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	b6 d0       	rcall	.+364    	; 0x28c <ccp_write_io>
	//NOP();
	calibration = FINISHED;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <calibration>
 128:	90 93 08 3e 	sts	0x3E08, r25	; 0x803e08 <calibration+0x1>
 12c:	08 95       	ret
  }
  else
  {
	ccp_write_io((void*)&(OSCCALR),OSCCALR + sign);
 12e:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
 132:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <__data_end>
 136:	68 0f       	add	r22, r24
 138:	81 e7       	ldi	r24, 0x71	; 113
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	a7 d0       	rcall	.+334    	; 0x28c <ccp_write_io>
 13e:	08 95       	ret

00000140 <CalibrateInternalRc>:
*
* Performs the calibration according to calibration method chosen.
* Compares different calibration results in order to achieve optimal results.
*
*/
void CalibrateInternalRc(void){
 140:	cf 93       	push	r28
    if (count == countVal) cycles = 1;			
  } while(--cycles);                                            // Calibrate using 32 (0x20) calibration cycles

#else                                                           // Binary search with or without neighbor search
  unsigned char countDiff;
  unsigned char neighborSearchStatus = FINISHED;
 142:	c1 e0       	ldi	r28, 0x01	; 1

  while(calibration == RUNNING){
 144:	36 c0       	rjmp	.+108    	; 0x1b2 <CalibrateInternalRc+0x72>
    count = Counter();                                          // Counter returns the count value after external ticks on XTAL
 146:	9f df       	rcall	.-194    	; 0x86 <Counter>
    if (calStep != 0)
 148:	20 91 03 3e 	lds	r18, 0x3E03	; 0x803e03 <calStep>
 14c:	22 23       	and	r18, r18
 14e:	11 f0       	breq	.+4      	; 0x154 <CalibrateInternalRc+0x14>
    {
      BinarySearch(count);                                      // Do binary search until stepsize is zero
 150:	ad df       	rcall	.-166    	; 0xac <BinarySearch>
 152:	2f c0       	rjmp	.+94     	; 0x1b2 <CalibrateInternalRc+0x72>
    }
    else
    {
      if(neighborSearchStatus == RUNNING)
 154:	c1 11       	cpse	r28, r1
 156:	18 c0       	rjmp	.+48     	; 0x188 <CalibrateInternalRc+0x48>
      {
        countDiff = ABS((signed int)count-(signed int)countVal);
 158:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <countVal>
 15c:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <countVal+0x1>
 160:	82 1b       	sub	r24, r18
 162:	93 0b       	sbc	r25, r19
 164:	9c 01       	movw	r18, r24
 166:	22 f4       	brpl	.+8      	; 0x170 <CalibrateInternalRc+0x30>
 168:	22 27       	eor	r18, r18
 16a:	33 27       	eor	r19, r19
 16c:	28 1b       	sub	r18, r24
 16e:	39 0b       	sbc	r19, r25
        if (countDiff < bestCountDiff)                          // Store OSCCALR if higher accuracy is achieved
 170:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 174:	28 17       	cp	r18, r24
 176:	30 f4       	brcc	.+12     	; 0x184 <CalibrateInternalRc+0x44>
        {
          bestCountDiff = countDiff;
 178:	20 93 00 3e 	sts	0x3E00, r18	; 0x803e00 <__DATA_REGION_ORIGIN__>
          bestOSCCAL = OSCCALR;
 17c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
 180:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <bestOSCCAL>
        }
        NeighborSearch();                                       // Do neighbor search
 184:	c1 df       	rcall	.-126    	; 0x108 <NeighborSearch>
 186:	15 c0       	rjmp	.+42     	; 0x1b2 <CalibrateInternalRc+0x72>
        countDiff = ABS((signed int)count-(signed int)countVal);
        bestCountDiff = countDiff;
        bestOSCCAL = OSCCALR;
#else
        neighborSearchStatus = RUNNING;                         // Do neighbor search by default
        neighborsSearched = 0;
 188:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <neighborsSearched>
        countDiff = ABS((signed int)count-(signed int)countVal);
 18c:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <countVal>
 190:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <countVal+0x1>
 194:	82 1b       	sub	r24, r18
 196:	93 0b       	sbc	r25, r19
 198:	9c 01       	movw	r18, r24
 19a:	22 f4       	brpl	.+8      	; 0x1a4 <CalibrateInternalRc+0x64>
 19c:	22 27       	eor	r18, r18
 19e:	33 27       	eor	r19, r19
 1a0:	28 1b       	sub	r18, r24
 1a2:	39 0b       	sbc	r19, r25
        bestCountDiff = countDiff;
 1a4:	20 93 00 3e 	sts	0x3E00, r18	; 0x803e00 <__DATA_REGION_ORIGIN__>
        bestOSCCAL = OSCCALR;
 1a8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
 1ac:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <bestOSCCAL>
        calibration = FINISHED;
        countDiff = ABS((signed int)count-(signed int)countVal);
        bestCountDiff = countDiff;
        bestOSCCAL = OSCCALR;
#else
        neighborSearchStatus = RUNNING;                         // Do neighbor search by default
 1b0:	c0 e0       	ldi	r28, 0x00	; 0

#else                                                           // Binary search with or without neighbor search
  unsigned char countDiff;
  unsigned char neighborSearchStatus = FINISHED;

  while(calibration == RUNNING){
 1b2:	80 91 07 3e 	lds	r24, 0x3E07	; 0x803e07 <calibration>
 1b6:	90 91 08 3e 	lds	r25, 0x3E08	; 0x803e08 <calibration+0x1>
 1ba:	89 2b       	or	r24, r25
 1bc:	21 f2       	breq	.-120    	; 0x146 <CalibrateInternalRc+0x6>
#endif
      }
    }
  }
#endif
}
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <CalibInternalRc>:
* oscillator characteristics. Ends in an eternal loop.
*
*/

unsigned char CalibInternalRc(void){
	CalibrationInit();                                            // Initiates calibration
 1c2:	56 df       	rcall	.-340    	; 0x70 <CalibrationInit>
	// Sets initial stepsize and sets calibration state to "running"
	calStep = INITIAL_STEP;
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	80 93 03 3e 	sts	0x3E03, r24	; 0x803e03 <calStep>
	calibration = RUNNING;
 1ca:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <calibration>
 1ce:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <calibration+0x1>
	CalibrateInternalRc();                                        // Calibrates to selected frequency
 1d2:	b6 df       	rcall	.-148    	; 0x140 <CalibrateInternalRc>
  
	return OSCCALR;  
 1d4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__RODATA_PM_OFFSET__+0x7f8071>
}
 1d8:	08 95       	ret

000001da <main>:
#include <util/delay.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 1da:	48 df       	rcall	.-368    	; 0x6c <atmel_start_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	81 ee       	ldi	r24, 0xE1	; 225
 1de:	94 e0       	ldi	r25, 0x04	; 4
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0x6>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0xc>
 1e6:	00 00       	nop
	_delay_ms(1);
	_NOP();
 1e8:	00 00       	nop
	CalibInternalRc();
 1ea:	eb df       	rcall	.-42     	; 0x1c2 <CalibInternalRc>
	_NOP();
 1ec:	00 00       	nop
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <main+0x14>

000001f0 <BOD_init>:
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret

000001f4 <CLKCTRL_init>:
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	68 ed       	ldi	r22, 0xD8	; 216
 1f8:	8c e7       	ldi	r24, 0x7C	; 124
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	35 d0       	rcall	.+106    	; 0x268 <protected_write_io>
 1fe:	43 e0       	ldi	r20, 0x03	; 3
 200:	68 ed       	ldi	r22, 0xD8	; 216
 202:	81 e6       	ldi	r24, 0x61	; 97
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	30 d0       	rcall	.+96     	; 0x268 <protected_write_io>
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret

0000020c <CPUINT_init>:
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret

00000210 <mcu_init>:
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 c0       	rjmp	.+16     	; 0x224 <mcu_init+0x14>
 214:	e8 2f       	mov	r30, r24
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	e0 5f       	subi	r30, 0xF0	; 240
 21a:	fb 4f       	sbci	r31, 0xFB	; 251
 21c:	90 81       	ld	r25, Z
 21e:	98 60       	ori	r25, 0x08	; 8
 220:	90 83       	st	Z, r25
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	88 30       	cpi	r24, 0x08	; 8
 226:	b0 f3       	brcs	.-20     	; 0x214 <mcu_init+0x4>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 c0       	rjmp	.+16     	; 0x23c <mcu_init+0x2c>
 22c:	e8 2f       	mov	r30, r24
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	e0 5d       	subi	r30, 0xD0	; 208
 232:	fb 4f       	sbci	r31, 0xFB	; 251
 234:	90 81       	ld	r25, Z
 236:	98 60       	ori	r25, 0x08	; 8
 238:	90 83       	st	Z, r25
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	88 30       	cpi	r24, 0x08	; 8
 23e:	b0 f3       	brcs	.-20     	; 0x22c <mcu_init+0x1c>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	08 c0       	rjmp	.+16     	; 0x254 <mcu_init+0x44>
 244:	e8 2f       	mov	r30, r24
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	e0 5b       	subi	r30, 0xB0	; 176
 24a:	fb 4f       	sbci	r31, 0xFB	; 251
 24c:	90 81       	ld	r25, Z
 24e:	98 60       	ori	r25, 0x08	; 8
 250:	90 83       	st	Z, r25
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	88 30       	cpi	r24, 0x08	; 8
 256:	b0 f3       	brcs	.-20     	; 0x244 <mcu_init+0x34>
 258:	08 95       	ret

0000025a <system_init>:
 25a:	da df       	rcall	.-76     	; 0x210 <mcu_init>
 25c:	cb df       	rcall	.-106    	; 0x1f4 <CLKCTRL_init>
 25e:	08 d0       	rcall	.+16     	; 0x270 <RTC_0_init>
 260:	d5 df       	rcall	.-86     	; 0x20c <CPUINT_init>
 262:	12 d0       	rcall	.+36     	; 0x288 <SLPCTRL_init>
 264:	c5 df       	rcall	.-118    	; 0x1f0 <BOD_init>
 266:	08 95       	ret

00000268 <protected_write_io>:
 268:	fc 01       	movw	r30, r24
 26a:	64 bf       	out	0x34, r22	; 52
 26c:	40 83       	st	Z, r20
 26e:	08 95       	ret

00000270 <RTC_0_init>:
 270:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 274:	81 11       	cpse	r24, r1
 276:	fc cf       	rjmp	.-8      	; 0x270 <RTC_0_init>
 278:	e0 e4       	ldi	r30, 0x40	; 64
 27a:	f1 e0       	ldi	r31, 0x01	; 1
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 83       	st	Z, r24
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	87 83       	std	Z+7, r24	; 0x07
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	08 95       	ret

00000288 <SLPCTRL_init>:
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret

0000028c <ccp_write_io>:
 28c:	dc 01       	movw	r26, r24
 28e:	28 ed       	ldi	r18, 0xD8	; 216
 290:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__RODATA_PM_OFFSET__+0x7f8034>
 294:	6c 93       	st	X, r22
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
